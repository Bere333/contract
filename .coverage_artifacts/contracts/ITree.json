{
  "contractName": "ITree",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTree",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessRestriction",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessRestriction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accessRestriction()\":{\"returns\":{\"_0\":\"AccessRestriction contract address\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"exists(uint256)\":{\"details\":\"check existance of {_tokenId}\",\"params\":{\"_tokenId\":\"id of token to check existance\"},\"returns\":{\"_0\":\"true if {_tokenId} exist\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"isTree()\":{\"returns\":{\"_0\":\"true in case of Tree contract have been initialized\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeMint(address,uint256)\":{\"details\":\"mint {_tokenId} to {_to} NOTE must call by TreeFactory\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setBaseURI(string)\":{\"details\":\"amin set {baseURI_} to baseURI \"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"Tree interface \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/.coverage_contracts/tree/ITree.sol\":\"ITree\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://038cad5fc2950820d94eead6323b56c3b95442aaa91a62c648fbde3256208ef5\",\"dweb:/ipfs/QmUkfnMmgc5gt6Dj99TkYEwUuRcPqBpm4qnxb71mqj6Qep\"]},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3c2746f8ebb4bfb6b8e8a768296c7f85f11b36f4873daabb91933c3602f00590\",\"dweb:/ipfs/QmdumDez8WEdk9FDuP7Jp5pDSJiQeFtFSJw3B5CEHJL4KU\"]},\"project:/.coverage_contracts/tree/ITree.sol\":{\"keccak256\":\"0xede1bb1577ca350ed7306cc3293b39f8d985a4dc04e383c664384cf3dfffa410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7bb6cdb02f1f808cf4ba3cac75926f141d6d117463fce4046ff3438ba5fb60c\",\"dweb:/ipfs/QmZpG3R1HhEhRdxWiyHHkX39kVh6r14F8zPhH7aAt1SUbn\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\nfunction c_0x75527c03(bytes32 c__0x75527c03) pure {}\n\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\n/** @title Tree interface */\ninterface ITree is IERC721Upgradeable {\n    /**\n     * @return true in case of Tree contract have been initialized\n     */\n    function isTree() external view returns (bool);\n\n    /**\n     * @return AccessRestriction contract address\n     */\n    function accessRestriction() external view returns (address);\n\n    /** @dev amin set {baseURI_} to baseURI */\n    function setBaseURI(string calldata baseURI_) external;\n\n    /**\n     * @dev mint {_tokenId} to {_to}\n     * NOTE must call by TreeFactory\n     */\n    function safeMint(address _to, uint256 _tokenId) external;\n\n    /**\n     * @dev check existance of {_tokenId}\n     * @param _tokenId id of token to check existance\n     * @return true if {_tokenId} exist\n     */\n    function exists(uint256 _tokenId) external view returns (bool);\n}\n",
  "sourcePath": "/home/smuggler/contract/.coverage_contracts/tree/ITree.sol",
  "ast": {
    "absolutePath": "project:/.coverage_contracts/tree/ITree.sol",
    "exportedSymbols": {
      "IERC165Upgradeable": [
        2263
      ],
      "IERC721Upgradeable": [
        1614
      ],
      "ITree": [
        31220
      ],
      "c_0x75527c03": [
        31181
      ]
    },
    "id": 31221,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 31175,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:96"
      },
      {
        "body": {
          "id": 31180,
          "nodeType": "Block",
          "src": "107:2:96",
          "statements": []
        },
        "id": 31181,
        "implemented": true,
        "kind": "freeFunction",
        "modifiers": [],
        "name": "c_0x75527c03",
        "nameLocation": "66:12:96",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 31178,
          "nodeType": "ParameterList",
          "parameters": [
            {
              "constant": false,
              "id": 31177,
              "mutability": "mutable",
              "name": "c__0x75527c03",
              "nameLocation": "87:13:96",
              "nodeType": "VariableDeclaration",
              "scope": 31181,
              "src": "79:21:96",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              },
              "typeName": {
                "id": 31176,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "79:7:96",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "visibility": "internal"
            }
          ],
          "src": "78:23:96"
        },
        "returnParameters": {
          "id": 31179,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "107:0:96"
        },
        "scope": 31221,
        "src": "57:52:96",
        "stateMutability": "pure",
        "virtual": false,
        "visibility": "internal"
      },
      {
        "absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol",
        "id": 31182,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 31221,
        "sourceUnit": 1615,
        "src": "112:81:96",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 31184,
              "name": "IERC721Upgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1614,
              "src": "311:18:96"
            },
            "id": 31185,
            "nodeType": "InheritanceSpecifier",
            "src": "311:18:96"
          }
        ],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 31183,
          "nodeType": "StructuredDocumentation",
          "src": "263:28:96",
          "text": "@title Tree interface "
        },
        "fullyImplemented": false,
        "id": 31220,
        "linearizedBaseContracts": [
          31220,
          1614,
          2263
        ],
        "name": "ITree",
        "nameLocation": "302:5:96",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 31186,
              "nodeType": "StructuredDocumentation",
              "src": "336:78:96",
              "text": " @return true in case of Tree contract have been initialized"
            },
            "functionSelector": "37b9fd77",
            "id": 31191,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isTree",
            "nameLocation": "428:6:96",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31187,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "434:2:96"
            },
            "returnParameters": {
              "id": 31190,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31189,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31191,
                  "src": "460:4:96",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 31188,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "460:4:96",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "459:6:96"
            },
            "scope": 31220,
            "src": "419:47:96",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 31192,
              "nodeType": "StructuredDocumentation",
              "src": "472:61:96",
              "text": " @return AccessRestriction contract address"
            },
            "functionSelector": "d6762c4a",
            "id": 31197,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "accessRestriction",
            "nameLocation": "547:17:96",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31193,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "564:2:96"
            },
            "returnParameters": {
              "id": 31196,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31195,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31197,
                  "src": "590:7:96",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 31194,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "590:7:96",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "589:9:96"
            },
            "scope": 31220,
            "src": "538:61:96",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 31198,
              "nodeType": "StructuredDocumentation",
              "src": "605:42:96",
              "text": "@dev amin set {baseURI_} to baseURI "
            },
            "functionSelector": "55f804b3",
            "id": 31203,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setBaseURI",
            "nameLocation": "661:10:96",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31201,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31200,
                  "mutability": "mutable",
                  "name": "baseURI_",
                  "nameLocation": "688:8:96",
                  "nodeType": "VariableDeclaration",
                  "scope": 31203,
                  "src": "672:24:96",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 31199,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "672:6:96",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "671:26:96"
            },
            "returnParameters": {
              "id": 31202,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "706:0:96"
            },
            "scope": 31220,
            "src": "652:55:96",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 31204,
              "nodeType": "StructuredDocumentation",
              "src": "713:85:96",
              "text": " @dev mint {_tokenId} to {_to}\n NOTE must call by TreeFactory"
            },
            "functionSelector": "a1448194",
            "id": 31211,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "safeMint",
            "nameLocation": "812:8:96",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31209,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31206,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "829:3:96",
                  "nodeType": "VariableDeclaration",
                  "scope": 31211,
                  "src": "821:11:96",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 31205,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "821:7:96",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 31208,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "842:8:96",
                  "nodeType": "VariableDeclaration",
                  "scope": 31211,
                  "src": "834:16:96",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 31207,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "834:7:96",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "820:31:96"
            },
            "returnParameters": {
              "id": 31210,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "860:0:96"
            },
            "scope": 31220,
            "src": "803:58:96",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 31212,
              "nodeType": "StructuredDocumentation",
              "src": "867:147:96",
              "text": " @dev check existance of {_tokenId}\n @param _tokenId id of token to check existance\n @return true if {_tokenId} exist"
            },
            "functionSelector": "4f558e79",
            "id": 31219,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "exists",
            "nameLocation": "1028:6:96",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31215,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31214,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "1043:8:96",
                  "nodeType": "VariableDeclaration",
                  "scope": 31219,
                  "src": "1035:16:96",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 31213,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1035:7:96",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1034:18:96"
            },
            "returnParameters": {
              "id": 31218,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31217,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31219,
                  "src": "1076:4:96",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 31216,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1076:4:96",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1075:6:96"
            },
            "scope": 31220,
            "src": "1019:63:96",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 31221,
        "src": "292:792:96",
        "usedErrors": []
      }
    ],
    "src": "33:1052:96"
  },
  "legacyAST": {
    "absolutePath": "project:/.coverage_contracts/tree/ITree.sol",
    "exportedSymbols": {
      "IERC165Upgradeable": [
        2263
      ],
      "IERC721Upgradeable": [
        1614
      ],
      "ITree": [
        31220
      ],
      "c_0x75527c03": [
        31181
      ]
    },
    "id": 31221,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 31175,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:96"
      },
      {
        "body": {
          "id": 31180,
          "nodeType": "Block",
          "src": "107:2:96",
          "statements": []
        },
        "id": 31181,
        "implemented": true,
        "kind": "freeFunction",
        "modifiers": [],
        "name": "c_0x75527c03",
        "nameLocation": "66:12:96",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 31178,
          "nodeType": "ParameterList",
          "parameters": [
            {
              "constant": false,
              "id": 31177,
              "mutability": "mutable",
              "name": "c__0x75527c03",
              "nameLocation": "87:13:96",
              "nodeType": "VariableDeclaration",
              "scope": 31181,
              "src": "79:21:96",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              },
              "typeName": {
                "id": 31176,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "79:7:96",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "visibility": "internal"
            }
          ],
          "src": "78:23:96"
        },
        "returnParameters": {
          "id": 31179,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "107:0:96"
        },
        "scope": 31221,
        "src": "57:52:96",
        "stateMutability": "pure",
        "virtual": false,
        "visibility": "internal"
      },
      {
        "absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol",
        "id": 31182,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 31221,
        "sourceUnit": 1615,
        "src": "112:81:96",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 31184,
              "name": "IERC721Upgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1614,
              "src": "311:18:96"
            },
            "id": 31185,
            "nodeType": "InheritanceSpecifier",
            "src": "311:18:96"
          }
        ],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 31183,
          "nodeType": "StructuredDocumentation",
          "src": "263:28:96",
          "text": "@title Tree interface "
        },
        "fullyImplemented": false,
        "id": 31220,
        "linearizedBaseContracts": [
          31220,
          1614,
          2263
        ],
        "name": "ITree",
        "nameLocation": "302:5:96",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 31186,
              "nodeType": "StructuredDocumentation",
              "src": "336:78:96",
              "text": " @return true in case of Tree contract have been initialized"
            },
            "functionSelector": "37b9fd77",
            "id": 31191,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isTree",
            "nameLocation": "428:6:96",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31187,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "434:2:96"
            },
            "returnParameters": {
              "id": 31190,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31189,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31191,
                  "src": "460:4:96",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 31188,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "460:4:96",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "459:6:96"
            },
            "scope": 31220,
            "src": "419:47:96",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 31192,
              "nodeType": "StructuredDocumentation",
              "src": "472:61:96",
              "text": " @return AccessRestriction contract address"
            },
            "functionSelector": "d6762c4a",
            "id": 31197,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "accessRestriction",
            "nameLocation": "547:17:96",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31193,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "564:2:96"
            },
            "returnParameters": {
              "id": 31196,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31195,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31197,
                  "src": "590:7:96",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 31194,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "590:7:96",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "589:9:96"
            },
            "scope": 31220,
            "src": "538:61:96",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 31198,
              "nodeType": "StructuredDocumentation",
              "src": "605:42:96",
              "text": "@dev amin set {baseURI_} to baseURI "
            },
            "functionSelector": "55f804b3",
            "id": 31203,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setBaseURI",
            "nameLocation": "661:10:96",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31201,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31200,
                  "mutability": "mutable",
                  "name": "baseURI_",
                  "nameLocation": "688:8:96",
                  "nodeType": "VariableDeclaration",
                  "scope": 31203,
                  "src": "672:24:96",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 31199,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "672:6:96",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "671:26:96"
            },
            "returnParameters": {
              "id": 31202,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "706:0:96"
            },
            "scope": 31220,
            "src": "652:55:96",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 31204,
              "nodeType": "StructuredDocumentation",
              "src": "713:85:96",
              "text": " @dev mint {_tokenId} to {_to}\n NOTE must call by TreeFactory"
            },
            "functionSelector": "a1448194",
            "id": 31211,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "safeMint",
            "nameLocation": "812:8:96",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31209,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31206,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "829:3:96",
                  "nodeType": "VariableDeclaration",
                  "scope": 31211,
                  "src": "821:11:96",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 31205,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "821:7:96",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 31208,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "842:8:96",
                  "nodeType": "VariableDeclaration",
                  "scope": 31211,
                  "src": "834:16:96",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 31207,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "834:7:96",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "820:31:96"
            },
            "returnParameters": {
              "id": 31210,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "860:0:96"
            },
            "scope": 31220,
            "src": "803:58:96",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 31212,
              "nodeType": "StructuredDocumentation",
              "src": "867:147:96",
              "text": " @dev check existance of {_tokenId}\n @param _tokenId id of token to check existance\n @return true if {_tokenId} exist"
            },
            "functionSelector": "4f558e79",
            "id": 31219,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "exists",
            "nameLocation": "1028:6:96",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31215,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31214,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "1043:8:96",
                  "nodeType": "VariableDeclaration",
                  "scope": 31219,
                  "src": "1035:16:96",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 31213,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1035:7:96",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1034:18:96"
            },
            "returnParameters": {
              "id": 31218,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31217,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31219,
                  "src": "1076:4:96",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 31216,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1076:4:96",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1075:6:96"
            },
            "scope": 31220,
            "src": "1019:63:96",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 31221,
        "src": "292:792:96",
        "usedErrors": []
      }
    ],
    "src": "33:1052:96"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.6+commit.11564f7e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.1",
  "updatedAt": "2021-08-31T13:33:31.734Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accessRestriction()": {
        "returns": {
          "_0": "AccessRestriction contract address"
        }
      },
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "exists(uint256)": {
        "details": "check existance of {_tokenId}",
        "params": {
          "_tokenId": "id of token to check existance"
        },
        "returns": {
          "_0": "true if {_tokenId} exist"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "isTree()": {
        "returns": {
          "_0": "true in case of Tree contract have been initialized"
        }
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeMint(address,uint256)": {
        "details": "mint {_tokenId} to {_to} NOTE must call by TreeFactory"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "setBaseURI(string)": {
        "details": "amin set {baseURI_} to baseURI "
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "title": "Tree interface ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}